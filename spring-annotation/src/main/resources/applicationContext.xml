<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 企图使用mybatis的配置文件中的这句话来自动设置驼峰，发现这里只是纯加载，不管用！！
	  需要使用这些来<property name="configLocation" value="classpath:mybatisConfig.xml"/>
	  注入和关联需要删除调mybatis-congfig原来的加载xml文件部分
	  <mappers>
	   <mapper resource="mapper/AccTableMapper.xml" />
    -->
	<!-- <import resource="mybatisConfig.xml"/> -->
	 
    <!--1 引入属性文件，在配置中占位使用 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
      <property name="locations">  
         <list>  
            <!-- 这里支持多种寻址方式：classpath和file   -->
            <value>classpath:log4j.properties</value>  
         </list>  
      </property>  
   </bean>

    <!--2 配置C3P0数据源 -->
    <bean id="datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <!--驱动类名 -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <!-- url -->
        <property name="url" value="jdbc:mysql://10.24.66.73:5002/maoyan_match?allowMultiQueries=true" />
        <!-- 用户名 -->
        <property name="username" value="maoyan_match" />
        <!-- 密码 -->
        <property name="password" value="maoyan_match" />
    </bean>
    
    <!--3 会话工厂bean sqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="datasource"></property>
        <!-- sql映射文件路径 -->
        <property name="mapperLocations" value="classpath*:mapper/*Mapper.xml" />
        
        <!-- 数据库返回值转化驼峰的方式一：自己写对象转化功能，适用于不写xml返回map对象的时候 -->
        <!-- <property name="objectWrapperFactory" ref="myObjectWrapperFactory"></property> -->
       
        <!-- 数据库返回值转化驼峰的方式二：适用于不写xml返回map对象,实体对象的时候，这里不需要加载mybatis的配置文件！-->
        <property name="configuration">
        	<bean class="org.apache.ibatis.session.Configuration">
        		<property name="mapUnderscoreToCamelCase" value="true"></property>
        	</bean>
        </property>
        
       <!-- 数据库返回值转化驼峰的方式三：适用于不写xml返回map对象,实体对象，加载了mybatis配置文件的时候需要删除掉mybatis配置文件中关于加载xml和数据库链接的部分-->
       <!-- <property name="configLocation" value="classpath:mybatisConfig.xml"/> -->
    </bean>
    
    <!--4 自动扫描对象关系映射 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!-- 指定要自动扫描接口的基础包，实现接口 -->
        <property name="basePackage" value="day45ForMyvatisSource.dao"></property>
    </bean>
    
    <!--5 声明式事务管理 -->
    <!--定义事物管理器，由spring管理事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"></property>
    </bean>
    
    <!--6 支持注解驱动的事务管理，指定事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--7 容器自动扫描IOC组件  -->
    <context:component-scan base-package="day45ForMyvatisSource"></context:component-scan>
    
    <!--7 aspectj支持自动代理实现AOP功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
</beans>